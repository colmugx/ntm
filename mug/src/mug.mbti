package "colmugx/mug"

// Values

// Types and methods
pub struct App {
  name : String
  description : String
  commands : Array[&TCommand]
  ver : String?
}
impl App {
  new(String, String, version~ : String? = ..) -> Self
}
impl TApplication for App

pub struct Flag {
  name : String
  short : String?
  description : String
}
impl Flag {
  new(String, String, short~ : String? = ..) -> Self
}

// Type aliases
pub typealias TArgs = ArrayView[String]

// Traits
pub trait AppHelpPrinter {
  print_help(Self) -> Unit
  print_version(Self) -> Unit
}

pub trait CommandManager {
  find_command(Self, String) -> &TCommand?
}

pub(open) trait HelpPrinter {
  print_usage(Self) -> Unit
}

pub(open) trait TApplication {
  execute(Self, ArrayView[String]) -> Unit
  add_command(Self, &TCommand) -> Unit
  version(Self) -> String?
}

pub(open) trait TCommand : HelpPrinter {
  execute(Self, ArrayView[String]) -> Unit
  name(Self) -> String
  description(Self) -> String
}

pub(open) trait TFlaggable {
  has_flag(Self, ArrayView[String], String) -> Bool
  add_flag(Self, Flag) -> Unit
}

